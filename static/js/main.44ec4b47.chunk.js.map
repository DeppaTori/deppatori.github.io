{"version":3,"sources":["components/UserSelect.js","actions.js","containers/UserSelectContainer.js","components/RepositoryList.js","containers/RepositoryListContainer.js","components/App.js","reducers.js","configureStore.js","index.js"],"names":["UserSelect","_this$props","this","props","value","options","userOnChange","react_default","a","createElement","onChange","e","target","map","option","key","Component","SELECT_USER","REQUEST_POST","RECEIVE_POST","fetchRepositories","user","dispatch","type","requestPost","fetch","concat","then","response","json","error","console","log","repositories","receivedAt","Date","now","receivePost","UserSelectContainer","connect","selectUser","getState","state","repositoriesByUser","isFetching","diInvalidate","shouldFetchPosts","fetchPostIfNeeded","RepositoryList","repository","id","name","RepositoryListContainer","selectedUser","_ref","lastUpdated","FetchApp","containers_UserSelectContainer","containers_RepositoryListContainer","fetchApp","combineReducers","arguments","length","undefined","action","Object","assign","defineProperty","didInvalidate","loggerMiddleware","createLogger","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","render","es","App","document","getElementById"],"mappings":"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","file":"static/js/main.44ec4b47.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nclass UserSelect extends Component{\r\n  \r\n\r\n    render(){\r\n        const {value,options,userOnChange} = this.props\r\n        return(\r\n            <div>\r\n            <h1>{value}</h1>\r\n            <select value={value} onChange={e=>userOnChange(e.target.value)}>\r\n                {\r\n                    options.map((option)=>(\r\n                        <option value={option} key={option}>\r\n                            {option}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n            </div>\r\n        )\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\nexport default UserSelect","export const SELECT_USER = 'SELECT_USER'\r\nexport const INVALIDATE_USER = 'INVALIDATE_USER'\r\nexport const REQUEST_POST = 'REQUEST_POST'\r\nexport const RECEIVE_POST = 'RECEIVE_POST'\r\n\r\nexport function selectUser(user){\r\n    return {\r\n        type:SELECT_USER,\r\n        user\r\n    }\r\n}\r\n\r\nexport function invalidateUser(user){\r\n    return {\r\n        type:INVALIDATE_USER,\r\n        user\r\n    }\r\n}\r\n\r\nexport function requestPost(user){\r\n    return {\r\n        type:REQUEST_POST,\r\n        user\r\n    }\r\n}\r\n\r\nexport function receivePost(user,json){\r\n    return {\r\n        type:RECEIVE_POST,\r\n        user,\r\n        repositories:json,\r\n        receivedAt:Date.now()\r\n    }\r\n}\r\n\r\nfunction fetchRepositories(user){\r\n    return function(dispatch){\r\n        dispatch(requestPost(user))\r\n\r\n        return fetch(`https://api.github.com/users/${user}/repos`)\r\n        .then(\r\n            response=>response.json(),\r\n            error=>console.log('An error occured',error)\r\n        )\r\n        .then(\r\n            json=>dispatch(receivePost(user,json))\r\n        )\r\n    }\r\n}\r\n\r\nfunction shouldFetchPosts(state,user){\r\n  \r\n    const repositories = state.repositoriesByUser[user];\r\n    if(!repositories){\r\n        return true\r\n    }else if(repositories.isFetching){\r\n        return false\r\n    }else{\r\n        return repositories.diInvalidate\r\n    }\r\n}\r\n\r\nexport function fetchPostIfNeeded(user){\r\n    return (dispatch,getState)=>{\r\n\r\n        if(shouldFetchPosts(getState(),user)){\r\n            return dispatch(fetchRepositories(user))\r\n        }\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport UserSelect from '../components/UserSelect'\r\nimport {connect} from 'react-redux'\r\nimport {fetchPostIfNeeded,selectUser} from '../actions'\r\n\r\n\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        userOnChange:user=>{\r\n            dispatch(selectUser(user))\r\n            dispatch(fetchPostIfNeeded(user))\r\n        }\r\n    }\r\n}\r\n\r\nconst UserSelectContainer = connect(null,mapDispatchToProps)(UserSelect)\r\n\r\nexport default UserSelectContainer\r\n","import React,{Component} from 'react'\r\n\r\nclass RepositoryList extends Component{\r\n    render(){\r\n        const {repositories} = this.props\r\n        return (\r\n            <ul>\r\n                {repositories.map(repository=>(\r\n                    <li key={repository.id}>{repository.name}</li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RepositoryList","import {connect} from 'react-redux'\r\nimport RepositoryList from '../components/RepositoryList';\r\n\r\nconst mapStateToProps = state =>{\r\n\r\n    const {selectedUser,repositoriesByUser} = state\r\n    const {isFetching,lastUpdated,repositories} = repositoriesByUser[selectedUser] \r\n    || { isFetching:true,repositories:[]}\r\n    console.log(repositories)\r\n    return {\r\n        selectedUser,\r\n        repositories,\r\n        isFetching,\r\n        lastUpdated\r\n    }\r\n}\r\n\r\nconst RepositoryListContainer = connect(mapStateToProps)(RepositoryList)\r\n\r\nexport default RepositoryListContainer","import React from 'react'\r\nimport UserSelectContainer from '../containers/UserSelectContainer';\r\nimport RepositoryListContainer from '../containers/RepositoryListContainer';\r\n\r\nconst FetchApp = ()=>(\r\n    <div>\r\n        <p>App</p>\r\n        <UserSelectContainer options={['octocat','octokit']} />\r\n        <RepositoryListContainer />\r\n    </div>\r\n)\r\n\r\nexport default FetchApp","import {REQUEST_POST,RECEIVE_POST,SELECT_USER} from './actions'\r\nimport { combineReducers } from 'redux';\r\n\r\nfunction selectedUser(state='octocat',action){\r\n    switch(action.type){\r\n        case SELECT_USER:\r\n            return action.user\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nfunction repository(state={\r\n    isFetching:false,\r\n    didInvalidate:false,\r\n    repositories:[]\r\n},action){\r\n    switch(action.type){\r\n        case REQUEST_POST:\r\n         \r\n            return Object.assign({},state,{\r\n                isFetching:true,\r\n                didInvalidate:false,\r\n            })\r\n        case RECEIVE_POST:\r\n            \r\n            return Object.assign({},state,{\r\n                isFetching:false,\r\n                didInvalidate:false,\r\n                repositories:action.repositories,\r\n                lastUpdated:action.receivedAt\r\n            })\r\n           \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nfunction repositoriesByUser(state={},action){\r\n    console.log(state);\r\n    switch(action.type){\r\n        case REQUEST_POST:\r\n        case RECEIVE_POST:\r\n            return Object.assign({},state,{\r\n                [action.user]:repository(state[action.user],action)\r\n            }) \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst fetchApp = combineReducers({repositoriesByUser,selectedUser})\r\n\r\nexport default fetchApp\r\n\r\n","import {createLogger} from 'redux-logger'\r\nimport {createStore,applyMiddleware} from 'redux'\r\nimport fetchApp from './reducers';\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nexport default function configureStore(preloadedState){\r\n    return createStore(\r\n        fetchApp,\r\n        preloadedState,\r\n        applyMiddleware(thunkMiddleware,loggerMiddleware)\r\n    )\r\n}","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport {Provider} from 'react-redux'\nimport configureStore from './configureStore';\n\nconst store = configureStore();\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}