{"version":3,"sources":["actions.js","reducers.js","configureStore.js","components/Picker.js","components/Posts.js","containers/AsyncApp.js","containers/Root.js","index.js"],"names":["REQUEST_POSTS","RECEIVE_POSTS","SELECT_SUBREDDIT","INVALIDATE_SUBREDDIT","fetchPosts","subreddit","dispatch","type","requestPosts","fetch","headers","Authorization","then","response","json","posts","users","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","defineProperty","items","lastUpdated","selectedSubreddit","loggerMiddleware","createLogger","Picker","_this$props","this","props","value","onChange","options","react_default","a","createElement","e","target","map","option","key","Component","Posts","console","log","post","i","name","AsyncApp","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","prevProps","_this$props2","nextSubreddit","preventDefault","_this$props3","_this$props4","Picker_Picker","toLocaleTimeString","onClick","style","opacity","Posts_Posts","connect","preloadedState","_ref","store","createStore","applyMiddleware","thunkMiddleware","Root","es","containers_AsyncApp","render","Root_Root","document","getElementById"],"mappings":"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","file":"static/js/main.b064dce5.chunk.js","sourcesContent":["import fetch from 'cross-fetch'\n\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\n\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\n\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\n\nfunction receivePosts(subreddit, json) {\n \n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    //posts: json.data.children.map(child => child.data),\n    posts: json.users,\n    receivedAt: Date.now()\n  }\n}\n\n/* //local\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n   // return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n   //return fetch(`https://jsonplaceholder.typicode.com/users/`)\n   return fetch(`http://localhost:3000/following`)\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n*/\n\n// live\nfunction fetchPosts(subreddit) {\n  return dispatch => {\n    dispatch(requestPosts(subreddit))\n   // return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n   //return fetch(`https://jsonplaceholder.typicode.com/users/`)\n   return fetch(`https://api.twitter.com/1.1/friends/list.json?screen_name=twitterapi`,{\n    headers: {\n      'Authorization': 'Bearer AAAAAAAAAAAAAAAAAAAAANld9wAAAAAANoe8Qi3tqJqAf5Uy6u5CUIHlmcg%3D3A19F5UkpTYXY6NF1xuZ0iFKSIxUpC0kKG6sbd91AEf0smu8fb' \n    }\n   }\n   )\n      .then(response => response.json())\n      .then(json => dispatch(receivePosts(subreddit, json)))\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      return dispatch(fetchPosts(subreddit))\n    }\n  }\n}","import { combineReducers } from 'redux'\nimport {\n  SELECT_SUBREDDIT,\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from './actions'\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      return Object.assign({}, state, {\n        didInvalidate: true\n      })\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        isFetching: true,\n        didInvalidate: false\n      })\n    case RECEIVE_POSTS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      })\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return Object.assign({}, state, {\n        [action.subreddit]: posts(state[action.subreddit], action)\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  postsBySubreddit,\n  selectedSubreddit\n})\n\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\n  )\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)} value={value}>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Posts extends Component {\n  render() {\n    console.log(this.props.posts);\n    return (\n      <ul>\n        {this.props.posts.map((post, i) => (\n         \n          <li key={i}>{post.name}</li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n   \n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['1', '2']}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <button onClick={this.handleRefreshClick}>Refresh</button>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\n    selectedSubreddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport configureStore from '../configureStore'\nimport AsyncApp from './AsyncApp'\n\nconst store = configureStore()\n\nexport default class Root extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AsyncApp />\n      </Provider>\n    )\n  }\n}","import 'babel-polyfill'\n\nimport React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\n\nrender(<Root />, document.getElementById('root'))"],"sourceRoot":""}